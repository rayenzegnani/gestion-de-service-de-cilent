{"ast":null,"code":"import axios from 'axios';\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api'\n});\n\n// Attach token automatically if present\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) config.headers.Authorization = `Bearer ${token}`;\n  return config;\n}, error => Promise.reject(error));\n\n// Handle response errors globally\napi.interceptors.response.use(response => response, error => {\n  if (error.response) {\n    // Server responded with error\n    console.error('API Error:', error.response.data.message || error.response.statusText);\n\n    // If token is invalid or expired, clear it\n    if (error.response.status === 401) {\n      localStorage.removeItem('token');\n      // Optionally redirect to login\n      // window.location.href = '/';\n    }\n  } else if (error.request) {\n    // Request was made but no response\n    console.error('Network Error: No response from server');\n  } else {\n    // Something else happened\n    console.error('Error:', error.message);\n  }\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","error","Promise","reject","response","console","data","message","statusText","status","removeItem"],"sources":["C:/Users/hamza/Documents/GitHub/gestion-de-service-de-cilent/client/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\r\n});\r\n\r\n// Attach token automatically if present\r\napi.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem('token');\r\n  if (token) config.headers.Authorization = `Bearer ${token}`;\r\n  return config;\r\n}, (error) => Promise.reject(error));\r\n\r\n// Handle response errors globally\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response) {\r\n      // Server responded with error\r\n      console.error('API Error:', error.response.data.message || error.response.statusText);\r\n      \r\n      // If token is invalid or expired, clear it\r\n      if (error.response.status === 401) {\r\n        localStorage.removeItem('token');\r\n        // Optionally redirect to login\r\n        // window.location.href = '/';\r\n      }\r\n    } else if (error.request) {\r\n      // Request was made but no response\r\n      console.error('Network Error: No response from server');\r\n    } else {\r\n      // Something else happened\r\n      console.error('Error:', error.message);\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default api;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI;AAC5C,CAAC,CAAC;;AAEF;AACAL,GAAG,CAACM,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACvC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAED,MAAM,CAACI,OAAO,CAACC,aAAa,GAAG,UAAUJ,KAAK,EAAE;EAC3D,OAAOD,MAAM;AACf,CAAC,EAAGM,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC,CAAC;;AAEpC;AACAf,GAAG,CAACM,YAAY,CAACY,QAAQ,CAACV,GAAG,CAC1BU,QAAQ,IAAKA,QAAQ,EACrBH,KAAK,IAAK;EACT,IAAIA,KAAK,CAACG,QAAQ,EAAE;IAClB;IACAC,OAAO,CAACJ,KAAK,CAAC,YAAY,EAAEA,KAAK,CAACG,QAAQ,CAACE,IAAI,CAACC,OAAO,IAAIN,KAAK,CAACG,QAAQ,CAACI,UAAU,CAAC;;IAErF;IACA,IAAIP,KAAK,CAACG,QAAQ,CAACK,MAAM,KAAK,GAAG,EAAE;MACjCZ,YAAY,CAACa,UAAU,CAAC,OAAO,CAAC;MAChC;MACA;IACF;EACF,CAAC,MAAM,IAAIT,KAAK,CAACR,OAAO,EAAE;IACxB;IACAY,OAAO,CAACJ,KAAK,CAAC,wCAAwC,CAAC;EACzD,CAAC,MAAM;IACL;IACAI,OAAO,CAACJ,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAACM,OAAO,CAAC;EACxC;EACA,OAAOL,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAef,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}